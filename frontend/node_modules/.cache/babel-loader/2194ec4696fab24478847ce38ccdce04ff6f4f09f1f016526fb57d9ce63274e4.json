{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amos\\\\Desktop\\\\invasionAll\\\\Invasion\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Polyline, useMapEvents } from 'react-leaflet';\nimport axios from 'axios';\nimport polyline from 'polyline';\nimport L from 'leaflet';\nimport Navbar from './components/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = [31.5, 34.8];\nconst API_BASE = \"https://invasion-api.onrender.com\";\nlet globalAlienId = 1;\nconst alienIcon = number => L.divIcon({\n  html: `<div style=\"font-size:16px; font-weight:bold; color:black;\">${number}</div>`,\n  className: 'alien-icon',\n  iconSize: [30, 30]\n});\nconst landingIcon = locationName => L.divIcon({\n  html: `<div style=\"\n    background-color: black;\n    color: white;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-weight: bold;\n    font-size: 14px;\n  \">${locationName}</div>`,\n  className: 'landing-icon',\n  iconSize: [100, 30]\n});\nconst getNearestTownName = async (lat, lng) => {\n  try {\n    const res = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`);\n    return res.data.address.town || res.data.address.city || res.data.address.village || \"Unknown\";\n  } catch {\n    return \"Unknown\";\n  }\n};\nconst ClickHandler = ({\n  onClick\n}) => {\n  _s();\n  useMapEvents({\n    click(e) {\n      onClick(e.latlng);\n    }\n  });\n  return null;\n};\n_s(ClickHandler, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c = ClickHandler;\nexport default function App() {\n  _s2();\n  const [landings, setLandings] = useState([]);\n  const [aliens, setAliens] = useState([]);\n  const [createMode, setCreateMode] = useState(false);\n  const [cursorStyle, setCursorStyle] = useState(\"default\");\n  const getRoute = async (from, to) => {\n    const res = await axios.get(`${API_BASE}/api/route?fromLat=${from[0]}&fromLng=${from[1]}&toLat=${to[0]}&toLng=${to[1]}`);\n    return polyline.decode(res.data.routes[0].geometry).map(coord => [coord[0], coord[1]]);\n  };\n  const handleMapClick = async latlng => {\n    if (!createMode) return;\n    setCreateMode(false);\n    setCursorStyle(\"default\");\n    const locationName = await getNearestTownName(latlng.lat, latlng.lng);\n    const landingId = Date.now();\n    const newLanding = {\n      id: landingId,\n      lat: latlng.lat,\n      lng: latlng.lng,\n      name: locationName\n    };\n    const directions = [0, 45, 90, 135, 180, 225, 270, 315];\n    const alienPromises = directions.map(async angle => {\n      const rad = angle * (Math.PI / 180);\n      const target = [latlng.lat + 0.05 * Math.cos(rad), latlng.lng + 0.05 * Math.sin(rad)];\n      const route = await getRoute([latlng.lat, latlng.lng], target);\n      return {\n        id: globalAlienId++,\n        route,\n        positionIdx: 0,\n        landingId\n      };\n    });\n    const newAliens = await Promise.all(alienPromises);\n    setLandings(l => [...l, newLanding]);\n    setAliens(a => [...a, ...newAliens]);\n  };\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const updateAliens = async () => {\n        const updated = await Promise.all(aliens.map(async alien => {\n          let newIdx = alien.positionIdx + 1;\n          if (newIdx >= alien.route.length) {\n            const currentPos = alien.route[alien.route.length - 1];\n            let newRoute = await getRoute(currentPos, [currentPos[0] + (Math.random() - 0.5) / 10, currentPos[1] + (Math.random() - 0.5) / 10]);\n            if (!newRoute || newRoute.length < 2) {\n              newRoute = alien.route.slice().reverse();\n            }\n            return {\n              ...alien,\n              route: newRoute,\n              positionIdx: 0\n            };\n          }\n          return {\n            ...alien,\n            positionIdx: newIdx\n          };\n        }));\n        setAliens(updated);\n      };\n      updateAliens();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [aliens]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (landings.length === 0 || aliens.length === 0) return;\n      const geoJSON = {\n        type: \"FeatureCollection\",\n        features: [...landings.map(l => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [l.lng, l.lat]\n          },\n          properties: {\n            type: \"landing\",\n            id: l.id,\n            locationName: l.name\n          }\n        })), ...aliens.map(a => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [a.route[a.positionIdx][1], a.route[a.positionIdx][0]]\n          },\n          properties: {\n            type: \"alien\",\n            id: a.id,\n            landingId: a.landingId\n          }\n        }))]\n      };\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [landings, aliens]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      cursor: cursorStyle\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onActivateCreate: () => {\n        setCreateMode(true);\n        setCursorStyle(\"url('https://em-content.zobj.net/thumbs/120/apple/354/high-voltage_26a1.png'), auto\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: 10,\n      style: {\n        height: 'calc(100vh - 50px)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ClickHandler, {\n        onClick: handleMapClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), landings.map(l => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [l.lat, l.lng],\n        icon: landingIcon(l.name)\n      }, l.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)), aliens.map(a => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Polyline, {\n          positions: a.route,\n          color: \"purple\",\n          dashArray: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: a.route[a.positionIdx],\n          icon: alienIcon(a.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, a.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"yWyQQJY9ra+0b5aFOMMC2jVDzU0=\");\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ClickHandler\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Polyline","useMapEvents","axios","polyline","L","Navbar","jsxDEV","_jsxDEV","center","API_BASE","globalAlienId","alienIcon","number","divIcon","html","className","iconSize","landingIcon","locationName","getNearestTownName","lat","lng","res","get","data","address","town","city","village","ClickHandler","onClick","_s","click","e","latlng","_c","App","_s2","landings","setLandings","aliens","setAliens","createMode","setCreateMode","cursorStyle","setCursorStyle","getRoute","from","to","decode","routes","geometry","map","coord","handleMapClick","landingId","Date","now","newLanding","id","name","directions","alienPromises","angle","rad","Math","PI","target","cos","sin","route","positionIdx","newAliens","Promise","all","l","a","interval","setInterval","updateAliens","updated","alien","newIdx","length","currentPos","newRoute","random","slice","reverse","clearInterval","geoJSON","type","features","coordinates","properties","post","style","cursor","children","onActivateCreate","fileName","_jsxFileName","lineNumber","columnNumber","zoom","height","url","position","icon","Fragment","positions","color","dashArray","_c2","$RefreshReg$"],"sources":["C:/Users/Amos/Desktop/invasionAll/Invasion/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Polyline, useMapEvents } from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport polyline from 'polyline';\r\nimport L from 'leaflet';\r\nimport Navbar from './components/Navbar';\r\n\r\nconst center = [31.5, 34.8];\r\nconst API_BASE = \"https://invasion-api.onrender.com\";\r\nlet globalAlienId = 1;\r\n\r\nconst alienIcon = (number) => L.divIcon({\r\n  html: `<div style=\"font-size:16px; font-weight:bold; color:black;\">${number}</div>`,\r\n  className: 'alien-icon',\r\n  iconSize: [30, 30],\r\n});\r\n\r\nconst landingIcon = (locationName) => L.divIcon({\r\n  html: `<div style=\"\r\n    background-color: black;\r\n    color: white;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    font-weight: bold;\r\n    font-size: 14px;\r\n  \">${locationName}</div>`,\r\n  className: 'landing-icon',\r\n  iconSize: [100, 30],\r\n});\r\n\r\nconst getNearestTownName = async (lat, lng) => {\r\n  try {\r\n    const res = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`);\r\n    return res.data.address.town || res.data.address.city || res.data.address.village || \"Unknown\";\r\n  } catch {\r\n    return \"Unknown\";\r\n  }\r\n};\r\n\r\nconst ClickHandler = ({ onClick }) => {\r\n  useMapEvents({\r\n    click(e) {\r\n      onClick(e.latlng);\r\n    },\r\n  });\r\n  return null;\r\n};\r\n\r\nexport default function App() {\r\n  const [landings, setLandings] = useState([]);\r\n  const [aliens, setAliens] = useState([]);\r\n  const [createMode, setCreateMode] = useState(false);\r\n  const [cursorStyle, setCursorStyle] = useState(\"default\");\r\n\r\n  const getRoute = async (from, to) => {\r\n    const res = await axios.get(\r\n      `${API_BASE}/api/route?fromLat=${from[0]}&fromLng=${from[1]}&toLat=${to[0]}&toLng=${to[1]}`\r\n    );\r\n    return polyline\r\n      .decode(res.data.routes[0].geometry)\r\n      .map(coord => [coord[0], coord[1]]);\r\n  };\r\n\r\n  const handleMapClick = async (latlng) => {\r\n    if (!createMode) return;\r\n    setCreateMode(false);\r\n    setCursorStyle(\"default\");\r\n\r\n    const locationName = await getNearestTownName(latlng.lat, latlng.lng);\r\n    const landingId = Date.now();\r\n\r\n    const newLanding = {\r\n      id: landingId,\r\n      lat: latlng.lat,\r\n      lng: latlng.lng,\r\n      name: locationName,\r\n    };\r\n\r\n    const directions = [0, 45, 90, 135, 180, 225, 270, 315];\r\n    const alienPromises = directions.map(async (angle) => {\r\n      const rad = angle * (Math.PI / 180);\r\n      const target = [\r\n        latlng.lat + 0.05 * Math.cos(rad),\r\n        latlng.lng + 0.05 * Math.sin(rad),\r\n      ];\r\n      const route = await getRoute([latlng.lat, latlng.lng], target);\r\n      return {\r\n        id: globalAlienId++,\r\n        route,\r\n        positionIdx: 0,\r\n        landingId,\r\n      };\r\n    });\r\n\r\n    const newAliens = await Promise.all(alienPromises);\r\n    setLandings(l => [...l, newLanding]);\r\n    setAliens(a => [...a, ...newAliens]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const updateAliens = async () => {\r\n        const updated = await Promise.all(\r\n          aliens.map(async (alien) => {\r\n            let newIdx = alien.positionIdx + 1;\r\n            if (newIdx >= alien.route.length) {\r\n              const currentPos = alien.route[alien.route.length - 1];\r\n              let newRoute = await getRoute(currentPos, [\r\n                currentPos[0] + (Math.random() - 0.5) / 10,\r\n                currentPos[1] + (Math.random() - 0.5) / 10,\r\n              ]);\r\n              if (!newRoute || newRoute.length < 2) {\r\n                newRoute = alien.route.slice().reverse();\r\n              }\r\n              return { ...alien, route: newRoute, positionIdx: 0 };\r\n            }\r\n            return { ...alien, positionIdx: newIdx };\r\n          })\r\n        );\r\n        setAliens(updated);\r\n      };\r\n      updateAliens();\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [aliens]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (landings.length === 0 || aliens.length === 0) return;\r\n      const geoJSON = {\r\n        type: \"FeatureCollection\",\r\n        features: [\r\n          ...landings.map(l => ({\r\n            type: \"Feature\",\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: [l.lng, l.lat],\r\n            },\r\n            properties: {\r\n              type: \"landing\",\r\n              id: l.id,\r\n              locationName: l.name,\r\n            }\r\n          })),\r\n          ...aliens.map(a => ({\r\n            type: \"Feature\",\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: [a.route[a.positionIdx][1], a.route[a.positionIdx][0]],\r\n            },\r\n            properties: {\r\n              type: \"alien\",\r\n              id: a.id,\r\n              landingId: a.landingId,\r\n            }\r\n          }))\r\n        ]\r\n      };\r\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [landings, aliens]);\r\n\r\n  return (\r\n    <div style={{ cursor: cursorStyle }}>\r\n      <Navbar onActivateCreate={() => {\r\n        setCreateMode(true);\r\n        setCursorStyle(\"url('https://em-content.zobj.net/thumbs/120/apple/354/high-voltage_26a1.png'), auto\");\r\n      }} />\r\n      <MapContainer center={center} zoom={10} style={{ height: 'calc(100vh - 50px)' }}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        <ClickHandler onClick={handleMapClick} />\r\n        {landings.map((l) => (\r\n          <Marker key={l.id} position={[l.lat, l.lng]} icon={landingIcon(l.name)} />\r\n        ))}\r\n        {aliens.map((a) => (\r\n          <React.Fragment key={a.id}>\r\n            <Polyline positions={a.route} color=\"purple\" dashArray=\"3\" />\r\n            <Marker\r\n              position={a.route[a.positionIdx]}\r\n              icon={alienIcon(a.id)}\r\n            />\r\n          </React.Fragment>\r\n        ))}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}