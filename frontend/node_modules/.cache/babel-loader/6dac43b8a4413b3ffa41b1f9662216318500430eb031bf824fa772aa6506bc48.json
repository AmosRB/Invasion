{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport axios from 'axios';\nconst API_BASE = \"https://invasion-api.onrender.com\";\nexport default function InvasionSync({\n  landings,\n  aliens,\n  setLandings,\n  setAliens\n}) {\n  _s();\n  // שליחה לשרת\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (landings.length === 0 && aliens.length === 0) return;\n      const geoJSON = {\n        type: \"FeatureCollection\",\n        features: [...landings.map(l => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [l.lng, l.lat]\n          },\n          properties: {\n            type: \"landing\",\n            id: l.id,\n            locationName: l.name,\n            landingCode: l.landingCode || null\n          }\n        })), ...aliens.map(a => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [a.route[a.positionIdx][1], a.route[a.positionIdx][0]]\n          },\n          properties: {\n            type: \"alien\",\n            id: a.id,\n            landingId: a.landingId,\n            alienCode: a.alienCode || null\n          }\n        }))]\n      };\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [landings, aliens]);\n\n  // קבלת נתונים מהשרת כולל alienCode ו-landingCode\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const res = await axios.get(`${API_BASE}/api/invasion`);\n        const features = res.data.features;\n        const remoteLandings = features.filter(f => {\n          var _f$properties;\n          return ((_f$properties = f.properties) === null || _f$properties === void 0 ? void 0 : _f$properties.type) === 'landing';\n        }).map(f => ({\n          id: f.properties.id,\n          lat: f.geometry.coordinates[1],\n          lng: f.geometry.coordinates[0],\n          name: f.properties.locationName || 'Unknown',\n          landingCode: f.properties.landingCode || '?'\n        }));\n        const remoteAliens = features.filter(f => {\n          var _f$properties2;\n          return ((_f$properties2 = f.properties) === null || _f$properties2 === void 0 ? void 0 : _f$properties2.type) === 'alien';\n        }).map(f => ({\n          id: f.properties.id,\n          route: [[f.geometry.coordinates[1], f.geometry.coordinates[0]]],\n          positionIdx: 0,\n          landingId: f.properties.landingId,\n          alienCode: f.properties.alienCode || null\n        }));\n        setLandings(remoteLandings);\n        setAliens(remoteAliens);\n      } catch (err) {\n        console.error(\"❌ Failed to load invasion data:\", err.message);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [setLandings, setAliens]);\n  return null;\n}\n_s(InvasionSync, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = InvasionSync;\nvar _c;\n$RefreshReg$(_c, \"InvasionSync\");","map":{"version":3,"names":["useEffect","axios","API_BASE","InvasionSync","landings","aliens","setLandings","setAliens","_s","interval","setInterval","length","geoJSON","type","features","map","l","geometry","coordinates","lng","lat","properties","id","locationName","name","landingCode","a","route","positionIdx","landingId","alienCode","post","clearInterval","res","get","data","remoteLandings","filter","f","_f$properties","remoteAliens","_f$properties2","err","console","error","message","_c","$RefreshReg$"],"sources":["C:/Users/Amos/Desktop/invasionAll/Invasion/frontend/src/components/InvasionSync.js"],"sourcesContent":["\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_BASE = \"https://invasion-api.onrender.com\";\r\n\r\nexport default function InvasionSync({ landings, aliens, setLandings, setAliens }) {\r\n  // שליחה לשרת\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (landings.length === 0 && aliens.length === 0) return;\r\n\r\n      const geoJSON = {\r\n        type: \"FeatureCollection\",\r\n        features: [\r\n          ...landings.map(l => ({\r\n            type: \"Feature\",\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: [l.lng, l.lat],\r\n            },\r\n            properties: {\r\n              type: \"landing\",\r\n              id: l.id,\r\n              locationName: l.name,\r\n              landingCode: l.landingCode || null\r\n            }\r\n          })),\r\n          ...aliens.map(a => ({\r\n            type: \"Feature\",\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: [\r\n                a.route[a.positionIdx][1],\r\n                a.route[a.positionIdx][0]\r\n              ]\r\n            },\r\n            properties: {\r\n              type: \"alien\",\r\n              id: a.id,\r\n              landingId: a.landingId,\r\n              alienCode: a.alienCode || null\r\n            }\r\n          }))\r\n        ]\r\n      };\r\n\r\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [landings, aliens]);\r\n\r\n  // קבלת נתונים מהשרת כולל alienCode ו-landingCode\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        const res = await axios.get(`${API_BASE}/api/invasion`);\r\n        const features = res.data.features;\r\n\r\n        const remoteLandings = features\r\n          .filter(f => f.properties?.type === 'landing')\r\n          .map(f => ({\r\n            id: f.properties.id,\r\n            lat: f.geometry.coordinates[1],\r\n            lng: f.geometry.coordinates[0],\r\n            name: f.properties.locationName || 'Unknown',\r\n            landingCode: f.properties.landingCode || '?'\r\n          }));\r\n\r\n        const remoteAliens = features\r\n          .filter(f => f.properties?.type === 'alien')\r\n          .map(f => ({\r\n            id: f.properties.id,\r\n            route: [[f.geometry.coordinates[1], f.geometry.coordinates[0]]],\r\n            positionIdx: 0,\r\n            landingId: f.properties.landingId,\r\n            alienCode: f.properties.alienCode || null\r\n          }));\r\n\r\n        setLandings(remoteLandings);\r\n        setAliens(remoteAliens);\r\n      } catch (err) {\r\n        console.error(\"❌ Failed to load invasion data:\", err.message);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [setLandings, setAliens]);\r\n\r\n  return null;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}