{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amos\\\\Desktop\\\\invasionAll\\\\invasion\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Polyline, useMapEvents } from 'react-leaflet';\nimport axios from 'axios';\nimport polyline from 'polyline';\nimport L from 'leaflet';\nimport Navbar from './components/Navbar';\nimport MapView from './components/MapView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getNearestTownName = async (lat, lng) => {\n  try {\n    const res = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`);\n    return res.data.address.town || res.data.address.city || res.data.address.village || \"Unknown\";\n  } catch {\n    return \"Unknown\";\n  }\n};\nconst center = [31.5, 34.8];\nconst API_BASE = \"https://invasion-api.onrender.com\";\nconst alienIcon = number => L.divIcon({\n  html: `<div style=\"font-size:20px; font-weight:bold;\">👽 <span style=\"font-size:14px; color:black;\">${number}</span></div>`,\n  className: 'alien-icon',\n  iconSize: [30, 30]\n});\nconst landingIcon = locationName => L.divIcon({\n  html: `<div style=\"display:flex; flex-direction:column; align-items:center;\">\n    <div style=\"font-size:24px;\">🛸</div>\n    <div style=\"background-color:black; color:white; padding:2px 6px; border-radius:4px; font-size:12px; margin-top:2px;\">${locationName}</div>\n  </div>`,\n  className: 'landing-icon',\n  iconSize: [100, 40]\n});\nconst getRoute = async (from, to) => {\n  try {\n    const res = await axios.get(`${API_BASE}/api/route?fromLat=${from[0]}&fromLng=${from[1]}&toLat=${to[0]}&toLng=${to[1]}`);\n    return polyline.decode(res.data.routes[0].geometry).map(([lat, lng]) => [lat, lng]);\n  } catch (err) {\n    console.error(\"❌ Route fetch failed:\", err.message);\n    return [from];\n  }\n};\nconst ClickHandler = ({\n  onClick\n}) => {\n  _s();\n  useMapEvents({\n    click(e) {\n      onClick(e.latlng);\n    }\n  });\n  return null;\n};\n_s(ClickHandler, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c = ClickHandler;\nexport default function App() {\n  _s2();\n  const [landings, setLandings] = useState([]);\n  const [aliens, setAliens] = useState([]);\n  const [createMode, setCreateMode] = useState(false);\n  const [cursorStyle, setCursorStyle] = useState(\"default\");\n  const getNextAlienId = existingAliens => {\n    const ids = existingAliens.map(a => a.id);\n    return ids.length > 0 ? Math.max(...ids) + 1 : 1;\n  };\n  const handleMapClick = async latlng => {\n    if (!createMode) return;\n    setCreateMode(false);\n    setCursorStyle(\"default\");\n    const landingId = Date.now();\n    const locationName = await getNearestTownName(latlng.lat, latlng.lng);\n    const newLanding = {\n      id: landingId,\n      lat: latlng.lat,\n      lng: latlng.lng,\n      name: locationName\n    };\n    const directions = [0, 45, 90, 135, 180, 225, 270, 315];\n    const startId = getNextAlienId(aliens);\n    const alienPromises = directions.map(async (angle, index) => {\n      const rad = angle * Math.PI / 180;\n      const target = [latlng.lat + 0.05 * Math.cos(rad), latlng.lng + 0.05 * Math.sin(rad)];\n      const route = await getRoute([latlng.lat, latlng.lng], target);\n      return {\n        id: startId + index,\n        route,\n        positionIdx: 0,\n        landingId\n      };\n    });\n    const newAliens = await Promise.all(alienPromises);\n    setLandings(l => [...l, newLanding]);\n    setAliens(a => [...a, ...newAliens]);\n  };\n  // חידוש מסלול לחייזרים כל שנייה\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const updatedAliens = await Promise.all(aliens.map(async alien => {\n        const newIdx = alien.positionIdx + 1;\n        if (newIdx >= alien.route.length) {\n          const from = alien.route[alien.route.length - 1];\n          const angle = Math.random() * 360;\n          const to = [from[0] + 0.05 * Math.cos(angle * Math.PI / 180), from[1] + 0.05 * Math.sin(angle * Math.PI / 180)];\n          const newRoute = await getRoute(from, to);\n          return {\n            ...alien,\n            route: newRoute,\n            positionIdx: 0\n          };\n        }\n        return {\n          ...alien,\n          positionIdx: newIdx\n        };\n      }));\n      setAliens(updatedAliens);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [aliens]);\n\n  // שליחה לשרת כל שנייה\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (landings.length === 0 && aliens.length === 0) return;\n      const geoJSON = {\n        type: \"FeatureCollection\",\n        features: [...landings.map(l => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [l.lng, l.lat]\n          },\n          properties: {\n            type: \"landing\",\n            id: l.id,\n            locationName: l.name\n          }\n        })), ...aliens.map(a => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [a.route[a.positionIdx][1], a.route[a.positionIdx][0]]\n          },\n          properties: {\n            type: \"alien\",\n            id: a.id,\n            landingId: a.landingId,\n            alienGlobalId: a.id\n          }\n        }))]\n      };\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [landings, aliens]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      cursor: cursorStyle\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onActivateCreate: () => {\n        setCreateMode(true);\n        setCursorStyle(\"crosshair\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: 10,\n      style: {\n        height: 'calc(100vh - 50px)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ClickHandler, {\n        onClick: handleMapClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), landings.map(l => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [l.lat, l.lng],\n        icon: landingIcon(l.name)\n      }, l.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)), aliens.map(a => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Polyline, {\n          positions: a.route,\n          color: \"purple\",\n          dashArray: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: a.route[a.positionIdx],\n          icon: alienIcon(a.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)]\n      }, a.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"yWyQQJY9ra+0b5aFOMMC2jVDzU0=\");\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ClickHandler\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Polyline","useMapEvents","axios","polyline","L","Navbar","MapView","jsxDEV","_jsxDEV","getNearestTownName","lat","lng","res","get","data","address","town","city","village","center","API_BASE","alienIcon","number","divIcon","html","className","iconSize","landingIcon","locationName","getRoute","from","to","decode","routes","geometry","map","err","console","error","message","ClickHandler","onClick","_s","click","e","latlng","_c","App","_s2","landings","setLandings","aliens","setAliens","createMode","setCreateMode","cursorStyle","setCursorStyle","getNextAlienId","existingAliens","ids","a","id","length","Math","max","handleMapClick","landingId","Date","now","newLanding","name","directions","startId","alienPromises","angle","index","rad","PI","target","cos","sin","route","positionIdx","newAliens","Promise","all","l","interval","setInterval","updatedAliens","alien","newIdx","random","newRoute","clearInterval","geoJSON","type","features","coordinates","properties","alienGlobalId","post","style","cursor","children","onActivateCreate","fileName","_jsxFileName","lineNumber","columnNumber","zoom","height","url","position","icon","Fragment","positions","color","dashArray","_c2","$RefreshReg$"],"sources":["C:/Users/Amos/Desktop/invasionAll/invasion/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Polyline, useMapEvents } from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport polyline from 'polyline';\r\nimport L from 'leaflet';\r\nimport Navbar from './components/Navbar';\r\nimport MapView from './components/MapView';\r\n\r\n\r\nconst getNearestTownName = async (lat, lng) => {\r\n  try {\r\n    const res = await axios.get(\r\n      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`\r\n    );\r\n    return res.data.address.town || res.data.address.city || res.data.address.village || \"Unknown\";\r\n  } catch {\r\n    return \"Unknown\";\r\n  }\r\n};\r\n\r\n\r\nconst center = [31.5, 34.8];\r\nconst API_BASE = \"https://invasion-api.onrender.com\";\r\n\r\nconst alienIcon = (number) => L.divIcon({\r\n  html: `<div style=\"font-size:20px; font-weight:bold;\">👽 <span style=\"font-size:14px; color:black;\">${number}</span></div>`,\r\n  className: 'alien-icon',\r\n  iconSize: [30, 30],\r\n});\r\n\r\nconst landingIcon = (locationName) => L.divIcon({\r\n  html: `<div style=\"display:flex; flex-direction:column; align-items:center;\">\r\n    <div style=\"font-size:24px;\">🛸</div>\r\n    <div style=\"background-color:black; color:white; padding:2px 6px; border-radius:4px; font-size:12px; margin-top:2px;\">${locationName}</div>\r\n  </div>`,\r\n  className: 'landing-icon',\r\n  iconSize: [100, 40],\r\n});\r\n\r\nconst getRoute = async (from, to) => {\r\n  try {\r\n    const res = await axios.get(\r\n      `${API_BASE}/api/route?fromLat=${from[0]}&fromLng=${from[1]}&toLat=${to[0]}&toLng=${to[1]}`\r\n    );\r\n    return polyline.decode(res.data.routes[0].geometry).map(([lat, lng]) => [lat, lng]);\r\n  } catch (err) {\r\n    console.error(\"❌ Route fetch failed:\", err.message);\r\n    return [from];\r\n  }\r\n};\r\n\r\nconst ClickHandler = ({ onClick }) => {\r\n  useMapEvents({ click(e) { onClick(e.latlng); } });\r\n  return null;\r\n};\r\n\r\nexport default function App() {\r\n  const [landings, setLandings] = useState([]);\r\n  const [aliens, setAliens] = useState([]);\r\n  const [createMode, setCreateMode] = useState(false);\r\n  const [cursorStyle, setCursorStyle] = useState(\"default\");\r\n\r\n  const getNextAlienId = (existingAliens) => {\r\n    const ids = existingAliens.map(a => a.id);\r\n    return ids.length > 0 ? Math.max(...ids) + 1 : 1;\r\n  };\r\n\r\n  const handleMapClick = async (latlng) => {\r\n    if (!createMode) return;\r\n    setCreateMode(false);\r\n    setCursorStyle(\"default\");\r\n\r\n    const landingId = Date.now();\r\n    const locationName = await getNearestTownName(latlng.lat, latlng.lng);\r\n\r\n\r\n    const newLanding = {\r\n      id: landingId,\r\n      lat: latlng.lat,\r\n      lng: latlng.lng,\r\n      name: locationName\r\n    };\r\n\r\n    const directions = [0, 45, 90, 135, 180, 225, 270, 315];\r\n    const startId = getNextAlienId(aliens);\r\n    const alienPromises = directions.map(async (angle, index) => {\r\n      const rad = angle * Math.PI / 180;\r\n      const target = [\r\n        latlng.lat + 0.05 * Math.cos(rad),\r\n        latlng.lng + 0.05 * Math.sin(rad)\r\n      ];\r\n      const route = await getRoute([latlng.lat, latlng.lng], target);\r\n      return {\r\n        id: startId + index,\r\n        route,\r\n        positionIdx: 0,\r\n        landingId\r\n      };\r\n    });\r\n\r\n    const newAliens = await Promise.all(alienPromises);\r\n\r\n    setLandings(l => [...l, newLanding]);\r\n    setAliens(a => [...a, ...newAliens]);\r\n  };\r\n  // חידוש מסלול לחייזרים כל שנייה\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      const updatedAliens = await Promise.all(\r\n        aliens.map(async alien => {\r\n          const newIdx = alien.positionIdx + 1;\r\n\r\n          if (newIdx >= alien.route.length) {\r\n            const from = alien.route[alien.route.length - 1];\r\n            const angle = Math.random() * 360;\r\n            const to = [\r\n              from[0] + 0.05 * Math.cos(angle * Math.PI / 180),\r\n              from[1] + 0.05 * Math.sin(angle * Math.PI / 180)\r\n            ];\r\n            const newRoute = await getRoute(from, to);\r\n            return {\r\n              ...alien,\r\n              route: newRoute,\r\n              positionIdx: 0\r\n            };\r\n          }\r\n\r\n          return {\r\n            ...alien,\r\n            positionIdx: newIdx\r\n          };\r\n        })\r\n      );\r\n      setAliens(updatedAliens);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [aliens]);\r\n\r\n  // שליחה לשרת כל שנייה\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (landings.length === 0 && aliens.length === 0) return;\r\n\r\n      const geoJSON = {\r\n        type: \"FeatureCollection\",\r\n        features: [\r\n          ...landings.map(l => ({\r\n            type: \"Feature\",\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: [l.lng, l.lat],\r\n            },\r\n            properties: {\r\n              type: \"landing\",\r\n              id: l.id,\r\n              locationName: l.name,\r\n            }\r\n          })),\r\n          ...aliens.map(a => ({\r\n            type: \"Feature\",\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: [\r\n                a.route[a.positionIdx][1],\r\n                a.route[a.positionIdx][0]\r\n              ]\r\n            },\r\n            properties: {\r\n              type: \"alien\",\r\n              id: a.id,\r\n              landingId: a.landingId,\r\n              alienGlobalId: a.id\r\n            }\r\n          }))\r\n        ]\r\n      };\r\n\r\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [landings, aliens]);\r\n\r\n  return (\r\n    <div style={{ cursor: cursorStyle }}>\r\n      <Navbar onActivateCreate={() => {\r\n        setCreateMode(true);\r\n        setCursorStyle(\"crosshair\");\r\n      }} />\r\n      <MapContainer center={center} zoom={10} style={{ height: 'calc(100vh - 50px)' }}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        <ClickHandler onClick={handleMapClick} />\r\n\r\n        {landings.map((l) => (\r\n          <Marker key={l.id} position={[l.lat, l.lng]} icon={landingIcon(l.name)} />\r\n        ))}\r\n\r\n        {aliens.map((a) => (\r\n          <React.Fragment key={a.id}>\r\n            <Polyline positions={a.route} color=\"purple\" dashArray=\"3\" />\r\n            <Marker position={a.route[a.positionIdx]} icon={alienIcon(a.id)} />\r\n          </React.Fragment>\r\n        ))}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}