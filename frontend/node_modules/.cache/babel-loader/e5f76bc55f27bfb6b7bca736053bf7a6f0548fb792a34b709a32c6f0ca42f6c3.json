{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport axios from 'axios';\nconst API_BASE = \"https://invasion-api.onrender.com\";\nfunction mergeById(prev, incoming) {\n  const map = new Map();\n  prev.forEach(item => map.set(item.id, item));\n  incoming.forEach(item => map.set(item.id, {\n    ...map.get(item.id),\n    ...item\n  }));\n  return Array.from(map.values());\n}\nexport default function InvasionSync({\n  landings,\n  aliens,\n  setLandings,\n  setAliens\n}) {\n  _s();\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (landings.length === 0 && aliens.length === 0) return;\n      const geoJSON = {\n        type: \"FeatureCollection\",\n        features: [...landings.map(l => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [l.lng, l.lat]\n          },\n          properties: {\n            type: \"landing\",\n            id: l.id,\n            locationName: l.name\n          }\n        })), ...aliens.map(a => {\n          var _a$route, _a$route$a$positionId, _a$position;\n          return {\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates: ((_a$route = a.route) === null || _a$route === void 0 ? void 0 : (_a$route$a$positionId = _a$route[a.positionIdx]) === null || _a$route$a$positionId === void 0 ? void 0 : _a$route$a$positionId.slice().reverse()) || ((_a$position = a.position) === null || _a$position === void 0 ? void 0 : _a$position.slice().reverse())\n            },\n            properties: {\n              type: \"alien\",\n              id: a.id,\n              landingId: a.landingId,\n              alienCode: a.alienCode || null\n            }\n          };\n        })]\n      };\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [landings, aliens]);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const res = await axios.get(`${API_BASE}/api/invasion`);\n        const features = res.data.features;\n        const remoteLandings = features.filter(f => {\n          var _f$properties;\n          return ((_f$properties = f.properties) === null || _f$properties === void 0 ? void 0 : _f$properties.type) === 'landing';\n        }).map(f => ({\n          id: f.properties.id,\n          lat: f.geometry.coordinates[1],\n          lng: f.geometry.coordinates[0],\n          name: f.properties.locationName || 'Unknown'\n        }));\n        const remoteAliens = features.filter(f => {\n          var _f$properties2;\n          return ((_f$properties2 = f.properties) === null || _f$properties2 === void 0 ? void 0 : _f$properties2.type) === 'alien';\n        }).map(f => ({\n          id: f.properties.id,\n          position: [f.geometry.coordinates[1], f.geometry.coordinates[0]],\n          positionIdx: 0,\n          landingId: f.properties.landingId,\n          alienCode: f.properties.alienCode || null\n        }));\n        setLandings(prev => mergeById(prev, remoteLandings));\n        setAliens(prev => mergeById(prev, remoteAliens));\n      } catch (err) {\n        console.error(\"❌ Failed to load invasion data:\", err.message);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [setLandings, setAliens]);\n  return null;\n}\n_s(InvasionSync, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = InvasionSync;\nvar _c;\n$RefreshReg$(_c, \"InvasionSync\");","map":{"version":3,"names":["useEffect","axios","API_BASE","mergeById","prev","incoming","map","Map","forEach","item","set","id","get","Array","from","values","InvasionSync","landings","aliens","setLandings","setAliens","_s","interval","setInterval","length","geoJSON","type","features","l","geometry","coordinates","lng","lat","properties","locationName","name","a","_a$route","_a$route$a$positionId","_a$position","route","positionIdx","slice","reverse","position","landingId","alienCode","post","clearInterval","res","data","remoteLandings","filter","f","_f$properties","remoteAliens","_f$properties2","err","console","error","message","_c","$RefreshReg$"],"sources":["C:/Users/Amos/Desktop/invasionAll/invasion/frontend/src/components/InvasionSync.js"],"sourcesContent":["\nimport { useEffect } from 'react';\nimport axios from 'axios';\n\nconst API_BASE = \"https://invasion-api.onrender.com\";\n\nfunction mergeById(prev, incoming) {\n  const map = new Map();\n  prev.forEach(item => map.set(item.id, item));\n  incoming.forEach(item => map.set(item.id, { ...map.get(item.id), ...item }));\n  return Array.from(map.values());\n}\n\nexport default function InvasionSync({ landings, aliens, setLandings, setAliens }) {\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (landings.length === 0 && aliens.length === 0) return;\n\n      const geoJSON = {\n        type: \"FeatureCollection\",\n        features: [\n          ...landings.map(l => ({\n            type: \"Feature\",\n            geometry: { type: \"Point\", coordinates: [l.lng, l.lat] },\n            properties: { type: \"landing\", id: l.id, locationName: l.name }\n          })),\n          ...aliens.map(a => ({\n            type: \"Feature\",\n            geometry: { type: \"Point\", coordinates: a.route?.[a.positionIdx]?.slice().reverse() || a.position?.slice().reverse() },\n            properties: {\n              type: \"alien\",\n              id: a.id,\n              landingId: a.landingId,\n              alienCode: a.alienCode || null\n            }\n          }))\n        ]\n      };\n\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [landings, aliens]);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const res = await axios.get(`${API_BASE}/api/invasion`);\n        const features = res.data.features;\n\n        const remoteLandings = features.filter(f => f.properties?.type === 'landing').map(f => ({\n          id: f.properties.id,\n          lat: f.geometry.coordinates[1],\n          lng: f.geometry.coordinates[0],\n          name: f.properties.locationName || 'Unknown'\n        }));\n\n        const remoteAliens = features.filter(f => f.properties?.type === 'alien').map(f => ({\n          id: f.properties.id,\n          position: [f.geometry.coordinates[1], f.geometry.coordinates[0]],\n          positionIdx: 0,\n          landingId: f.properties.landingId,\n          alienCode: f.properties.alienCode || null\n        }));\n\n        setLandings(prev => mergeById(prev, remoteLandings));\n        setAliens(prev => mergeById(prev, remoteAliens));\n      } catch (err) {\n        console.error(\"❌ Failed to load invasion data:\", err.message);\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [setLandings, setAliens]);\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}