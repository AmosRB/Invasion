{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport axios from 'axios';\nconst API_BASE = \"https://invasion-api.onrender.com\";\nfunction mergeById(prev, incoming) {\n  const map = new Map();\n  prev.forEach(item => map.set(item.id, item));\n  incoming.forEach(item => {\n    const existing = map.get(item.id) || {};\n    // שמור route מקומי אם כבר קיים\n    map.set(item.id, {\n      ...existing,\n      ...item,\n      route: existing.route || item.route\n    });\n  });\n  return Array.from(map.values());\n}\nexport default function InvasionSync({\n  landings,\n  aliens,\n  setLandings,\n  setAliens\n}) {\n  _s();\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (landings.length === 0 && aliens.length === 0) return;\n      const geoJSON = {\n        type: \"FeatureCollection\",\n        features: [...landings.map(l => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [l.lng, l.lat]\n          },\n          properties: {\n            type: \"landing\",\n            id: l.id,\n            locationName: l.name\n          }\n        })), ...aliens.map(a => {\n          var _a$route, _a$route$a$positionId;\n          return {\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates: ((_a$route = a.route) === null || _a$route === void 0 ? void 0 : (_a$route$a$positionId = _a$route[a.positionIdx]) === null || _a$route$a$positionId === void 0 ? void 0 : _a$route$a$positionId.slice().reverse()) || [0, 0]\n            },\n            properties: {\n              type: \"alien\",\n              id: a.id,\n              landingId: a.landingId,\n              alienCode: a.alienCode || null\n            }\n          };\n        })]\n      };\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [landings, aliens]);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const res = await axios.get(`${API_BASE}/api/invasion`);\n        const features = res.data.features;\n        const remoteLandings = features.filter(f => {\n          var _f$properties;\n          return ((_f$properties = f.properties) === null || _f$properties === void 0 ? void 0 : _f$properties.type) === 'landing';\n        }).map(f => ({\n          id: f.properties.id,\n          lat: f.geometry.coordinates[1],\n          lng: f.geometry.coordinates[0],\n          name: f.properties.locationName || 'Unknown'\n        }));\n        const remoteAliens = features.filter(f => {\n          var _f$properties2;\n          return ((_f$properties2 = f.properties) === null || _f$properties2 === void 0 ? void 0 : _f$properties2.type) === 'alien';\n        }).map(f => ({\n          id: f.properties.id,\n          position: [f.geometry.coordinates[1], f.geometry.coordinates[0]],\n          positionIdx: 0,\n          landingId: f.properties.landingId,\n          alienCode: f.properties.alienCode || null\n        }));\n        setLandings(prev => mergeById(prev, remoteLandings));\n        setAliens(prev => mergeById(prev, remoteAliens));\n      } catch (err) {\n        console.error(\"❌ Failed to load invasion data:\", err.message);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [setLandings, setAliens]);\n  return null;\n}\n_s(InvasionSync, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = InvasionSync;\nvar _c;\n$RefreshReg$(_c, \"InvasionSync\");","map":{"version":3,"names":["useEffect","axios","API_BASE","mergeById","prev","incoming","map","Map","forEach","item","set","id","existing","get","route","Array","from","values","InvasionSync","landings","aliens","setLandings","setAliens","_s","interval","setInterval","length","geoJSON","type","features","l","geometry","coordinates","lng","lat","properties","locationName","name","a","_a$route","_a$route$a$positionId","positionIdx","slice","reverse","landingId","alienCode","post","clearInterval","res","data","remoteLandings","filter","f","_f$properties","remoteAliens","_f$properties2","position","err","console","error","message","_c","$RefreshReg$"],"sources":["C:/Users/Amos/Desktop/invasionAll/invasion/frontend/src/components/InvasionSync.js"],"sourcesContent":["\nimport { useEffect } from 'react';\nimport axios from 'axios';\n\nconst API_BASE = \"https://invasion-api.onrender.com\";\n\nfunction mergeById(prev, incoming) {\n  const map = new Map();\n  prev.forEach(item => map.set(item.id, item));\n  incoming.forEach(item => {\n    const existing = map.get(item.id) || {};\n    // שמור route מקומי אם כבר קיים\n    map.set(item.id, {\n      ...existing,\n      ...item,\n      route: existing.route || item.route\n    });\n  });\n  return Array.from(map.values());\n}\n\nexport default function InvasionSync({ landings, aliens, setLandings, setAliens }) {\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (landings.length === 0 && aliens.length === 0) return;\n\n      const geoJSON = {\n        type: \"FeatureCollection\",\n        features: [\n          ...landings.map(l => ({\n            type: \"Feature\",\n            geometry: { type: \"Point\", coordinates: [l.lng, l.lat] },\n            properties: { type: \"landing\", id: l.id, locationName: l.name }\n          })),\n          ...aliens.map(a => ({\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates: a.route?.[a.positionIdx]?.slice().reverse() || [0, 0]\n            },\n            properties: {\n              type: \"alien\",\n              id: a.id,\n              landingId: a.landingId,\n              alienCode: a.alienCode || null\n            }\n          }))\n        ]\n      };\n\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [landings, aliens]);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const res = await axios.get(`${API_BASE}/api/invasion`);\n        const features = res.data.features;\n\n        const remoteLandings = features.filter(f => f.properties?.type === 'landing').map(f => ({\n          id: f.properties.id,\n          lat: f.geometry.coordinates[1],\n          lng: f.geometry.coordinates[0],\n          name: f.properties.locationName || 'Unknown'\n        }));\n\n        const remoteAliens = features.filter(f => f.properties?.type === 'alien').map(f => ({\n          id: f.properties.id,\n          position: [f.geometry.coordinates[1], f.geometry.coordinates[0]],\n          positionIdx: 0,\n          landingId: f.properties.landingId,\n          alienCode: f.properties.alienCode || null\n        }));\n\n        setLandings(prev => mergeById(prev, remoteLandings));\n        setAliens(prev => mergeById(prev, remoteAliens));\n      } catch (err) {\n        console.error(\"❌ Failed to load invasion data:\", err.message);\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [setLandings, setAliens]);\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}