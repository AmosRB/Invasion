{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport axios from 'axios';\nconst API_BASE = \"https://invasion-api.onrender.com\";\n\n// Utility to merge arrays by id\nfunction mergeById(prev, incoming) {\n  const map = new Map();\n  prev.forEach(item => map.set(item.id, item));\n  incoming.forEach(item => map.set(item.id, {\n    ...map.get(item.id),\n    ...item\n  }));\n  return Array.from(map.values());\n}\nexport default function InvasionSync({\n  landings,\n  aliens,\n  setLandings,\n  setAliens\n}) {\n  _s();\n  // שליחה לשרת\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (landings.length === 0 && aliens.length === 0) return;\n      const geoJSON = {\n        type: \"FeatureCollection\",\n        features: [...landings.map(l => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [l.lng, l.lat]\n          },\n          properties: {\n            type: \"landing\",\n            id: l.id,\n            locationName: l.name\n          }\n        })), ...aliens.map(a => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [a.route[a.positionIdx][1], a.route[a.positionIdx][0]]\n          },\n          properties: {\n            type: \"alien\",\n            id: a.id,\n            landingId: a.landingId,\n            alienCode: a.alienCode || null\n          }\n        }))]\n      };\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [landings, aliens]);\n\n  // קבלת נתונים מהשרת כולל alienCode\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const res = await axios.get(`${API_BASE}/api/invasion`);\n        const features = res.data.features;\n        const remoteLandings = features.filter(f => {\n          var _f$properties;\n          return ((_f$properties = f.properties) === null || _f$properties === void 0 ? void 0 : _f$properties.type) === 'landing';\n        }).map(f => ({\n          id: f.properties.id,\n          lat: f.geometry.coordinates[1],\n          lng: f.geometry.coordinates[0],\n          name: f.properties.locationName || 'Unknown'\n        }));\n        const remoteAliens = features.filter(f => {\n          var _f$properties2;\n          return ((_f$properties2 = f.properties) === null || _f$properties2 === void 0 ? void 0 : _f$properties2.type) === 'alien';\n        }).map(f => ({\n          id: f.properties.id,\n          route: [[f.geometry.coordinates[1], f.geometry.coordinates[0]]],\n          positionIdx: 0,\n          landingId: f.properties.landingId,\n          alienCode: f.properties.alienCode || null\n        }));\n        setLandings(prev => mergeById(prev, remoteLandings));\n        setAliens(prev => mergeById(prev, remoteAliens));\n      } catch (err) {\n        console.error(\"❌ Failed to load invasion data:\", err.message);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [setLandings, setAliens]);\n  return null;\n}\n_s(InvasionSync, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = InvasionSync;\nvar _c;\n$RefreshReg$(_c, \"InvasionSync\");","map":{"version":3,"names":["useEffect","axios","API_BASE","mergeById","prev","incoming","map","Map","forEach","item","set","id","get","Array","from","values","InvasionSync","landings","aliens","setLandings","setAliens","_s","interval","setInterval","length","geoJSON","type","features","l","geometry","coordinates","lng","lat","properties","locationName","name","a","route","positionIdx","landingId","alienCode","post","clearInterval","res","data","remoteLandings","filter","f","_f$properties","remoteAliens","_f$properties2","err","console","error","message","_c","$RefreshReg$"],"sources":["C:/Users/Amos/Desktop/invasionAll/invasion/frontend/src/components/InvasionSync.js"],"sourcesContent":["\nimport { useEffect } from 'react';\nimport axios from 'axios';\n\nconst API_BASE = \"https://invasion-api.onrender.com\";\n\n// Utility to merge arrays by id\nfunction mergeById(prev, incoming) {\n  const map = new Map();\n  prev.forEach(item => map.set(item.id, item));\n  incoming.forEach(item => map.set(item.id, { ...map.get(item.id), ...item }));\n  return Array.from(map.values());\n}\n\nexport default function InvasionSync({ landings, aliens, setLandings, setAliens }) {\n  // שליחה לשרת\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (landings.length === 0 && aliens.length === 0) return;\n\n      const geoJSON = {\n        type: \"FeatureCollection\",\n        features: [\n          ...landings.map(l => ({\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates: [l.lng, l.lat],\n            },\n            properties: {\n              type: \"landing\",\n              id: l.id,\n              locationName: l.name,\n            }\n          })),\n          ...aliens.map(a => ({\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates: [\n                a.route[a.positionIdx][1],\n                a.route[a.positionIdx][0]\n              ]\n            },\n            properties: {\n              type: \"alien\",\n              id: a.id,\n              landingId: a.landingId,\n              alienCode: a.alienCode || null\n            }\n          }))\n        ]\n      };\n\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [landings, aliens]);\n\n  // קבלת נתונים מהשרת כולל alienCode\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const res = await axios.get(`${API_BASE}/api/invasion`);\n        const features = res.data.features;\n\n        const remoteLandings = features\n          .filter(f => f.properties?.type === 'landing')\n          .map(f => ({\n            id: f.properties.id,\n            lat: f.geometry.coordinates[1],\n            lng: f.geometry.coordinates[0],\n            name: f.properties.locationName || 'Unknown'\n          }));\n\n        const remoteAliens = features\n          .filter(f => f.properties?.type === 'alien')\n          .map(f => ({\n            id: f.properties.id,\n            route: [[f.geometry.coordinates[1], f.geometry.coordinates[0]]],\n            positionIdx: 0,\n            landingId: f.properties.landingId,\n            alienCode: f.properties.alienCode || null\n          }));\n\n        setLandings(prev => mergeById(prev, remoteLandings));\n        setAliens(prev => mergeById(prev, remoteAliens));\n      } catch (err) {\n        console.error(\"❌ Failed to load invasion data:\", err.message);\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [setLandings, setAliens]);\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}