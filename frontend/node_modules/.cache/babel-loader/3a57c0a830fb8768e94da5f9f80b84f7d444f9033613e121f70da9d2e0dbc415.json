{"ast":null,"code":"useEffect(() => {\n  const interval = setInterval(async () => {\n    try {\n      const res = await axios.get(`${API_BASE}/api/invasion`);\n      const features = res.data.features;\n      const newLandings = features.filter(f => {\n        var _f$properties;\n        return ((_f$properties = f.properties) === null || _f$properties === void 0 ? void 0 : _f$properties.type) === 'landing';\n      });\n      const newAliens = features.filter(f => {\n        var _f$properties2;\n        return ((_f$properties2 = f.properties) === null || _f$properties2 === void 0 ? void 0 : _f$properties2.type) === 'alien';\n      });\n      const remoteLandings = newLandings.map(l => ({\n        id: l.properties.id,\n        lat: l.geometry.coordinates[1],\n        lng: l.geometry.coordinates[0],\n        name: l.properties.locationName\n      }));\n      const remoteAliens = newAliens.map(a => ({\n        id: a.properties.id,\n        landingId: a.properties.landingId,\n        route: [[a.geometry.coordinates[1], a.geometry.coordinates[0]]],\n        positionIdx: 0\n      }));\n      setLandings(prev => {\n        const localIds = prev.map(l => l.id);\n        const merged = [...prev];\n        remoteLandings.forEach(l => {\n          if (!localIds.includes(l.id)) merged.push(l);\n        });\n        return merged;\n      });\n      setAliens(prev => {\n        const localIds = prev.map(a => a.id);\n        const merged = [...prev];\n        remoteAliens.forEach(a => {\n          if (!localIds.includes(a.id)) merged.push(a);\n        });\n        return merged;\n      });\n    } catch (err) {\n      console.error(\"❌ Failed to fetch invasion data:\", err.message);\n    }\n  }, 1000);\n  return () => clearInterval(interval);\n}, []);","map":{"version":3,"names":["useEffect","interval","setInterval","res","axios","get","API_BASE","features","data","newLandings","filter","f","_f$properties","properties","type","newAliens","_f$properties2","remoteLandings","map","l","id","lat","geometry","coordinates","lng","name","locationName","remoteAliens","a","landingId","route","positionIdx","setLandings","prev","localIds","merged","forEach","includes","push","setAliens","err","console","error","message","clearInterval"],"sources":["C:/Users/Amos/Desktop/invasionAll/invasion/frontend/src/App.js"],"sourcesContent":["useEffect(() => {\r\n  const interval = setInterval(async () => {\r\n    try {\r\n      const res = await axios.get(`${API_BASE}/api/invasion`);\r\n      const features = res.data.features;\r\n\r\n      const newLandings = features.filter(f => f.properties?.type === 'landing');\r\n      const newAliens = features.filter(f => f.properties?.type === 'alien');\r\n\r\n      const remoteLandings = newLandings.map(l => ({\r\n        id: l.properties.id,\r\n        lat: l.geometry.coordinates[1],\r\n        lng: l.geometry.coordinates[0],\r\n        name: l.properties.locationName\r\n      }));\r\n\r\n      const remoteAliens = newAliens.map(a => ({\r\n        id: a.properties.id,\r\n        landingId: a.properties.landingId,\r\n        route: [[a.geometry.coordinates[1], a.geometry.coordinates[0]]],\r\n        positionIdx: 0\r\n      }));\r\n\r\n      setLandings(prev => {\r\n        const localIds = prev.map(l => l.id);\r\n        const merged = [...prev];\r\n        remoteLandings.forEach(l => {\r\n          if (!localIds.includes(l.id)) merged.push(l);\r\n        });\r\n        return merged;\r\n      });\r\n\r\n      setAliens(prev => {\r\n        const localIds = prev.map(a => a.id);\r\n        const merged = [...prev];\r\n        remoteAliens.forEach(a => {\r\n          if (!localIds.includes(a.id)) merged.push(a);\r\n        });\r\n        return merged;\r\n      });\r\n    } catch (err) {\r\n      console.error(\"❌ Failed to fetch invasion data:\", err.message);\r\n    }\r\n  }, 1000);\r\n\r\n  return () => clearInterval(interval);\r\n}, []);\r\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACd,MAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAY;IACvC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,GAAGC,QAAQ,eAAe,CAAC;MACvD,MAAMC,QAAQ,GAAGJ,GAAG,CAACK,IAAI,CAACD,QAAQ;MAElC,MAAME,WAAW,GAAGF,QAAQ,CAACG,MAAM,CAACC,CAAC;QAAA,IAAAC,aAAA;QAAA,OAAI,EAAAA,aAAA,GAAAD,CAAC,CAACE,UAAU,cAAAD,aAAA,uBAAZA,aAAA,CAAcE,IAAI,MAAK,SAAS;MAAA,EAAC;MAC1E,MAAMC,SAAS,GAAGR,QAAQ,CAACG,MAAM,CAACC,CAAC;QAAA,IAAAK,cAAA;QAAA,OAAI,EAAAA,cAAA,GAAAL,CAAC,CAACE,UAAU,cAAAG,cAAA,uBAAZA,cAAA,CAAcF,IAAI,MAAK,OAAO;MAAA,EAAC;MAEtE,MAAMG,cAAc,GAAGR,WAAW,CAACS,GAAG,CAACC,CAAC,KAAK;QAC3CC,EAAE,EAAED,CAAC,CAACN,UAAU,CAACO,EAAE;QACnBC,GAAG,EAAEF,CAAC,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;QAC9BC,GAAG,EAAEL,CAAC,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;QAC9BE,IAAI,EAAEN,CAAC,CAACN,UAAU,CAACa;MACrB,CAAC,CAAC,CAAC;MAEH,MAAMC,YAAY,GAAGZ,SAAS,CAACG,GAAG,CAACU,CAAC,KAAK;QACvCR,EAAE,EAAEQ,CAAC,CAACf,UAAU,CAACO,EAAE;QACnBS,SAAS,EAAED,CAAC,CAACf,UAAU,CAACgB,SAAS;QACjCC,KAAK,EAAE,CAAC,CAACF,CAAC,CAACN,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,EAAEK,CAAC,CAACN,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/DQ,WAAW,EAAE;MACf,CAAC,CAAC,CAAC;MAEHC,WAAW,CAACC,IAAI,IAAI;QAClB,MAAMC,QAAQ,GAAGD,IAAI,CAACf,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,CAAC;QACpC,MAAMe,MAAM,GAAG,CAAC,GAAGF,IAAI,CAAC;QACxBhB,cAAc,CAACmB,OAAO,CAACjB,CAAC,IAAI;UAC1B,IAAI,CAACe,QAAQ,CAACG,QAAQ,CAAClB,CAAC,CAACC,EAAE,CAAC,EAAEe,MAAM,CAACG,IAAI,CAACnB,CAAC,CAAC;QAC9C,CAAC,CAAC;QACF,OAAOgB,MAAM;MACf,CAAC,CAAC;MAEFI,SAAS,CAACN,IAAI,IAAI;QAChB,MAAMC,QAAQ,GAAGD,IAAI,CAACf,GAAG,CAACU,CAAC,IAAIA,CAAC,CAACR,EAAE,CAAC;QACpC,MAAMe,MAAM,GAAG,CAAC,GAAGF,IAAI,CAAC;QACxBN,YAAY,CAACS,OAAO,CAACR,CAAC,IAAI;UACxB,IAAI,CAACM,QAAQ,CAACG,QAAQ,CAACT,CAAC,CAACR,EAAE,CAAC,EAAEe,MAAM,CAACG,IAAI,CAACV,CAAC,CAAC;QAC9C,CAAC,CAAC;QACF,OAAOO,MAAM;MACf,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,GAAG,CAACG,OAAO,CAAC;IAChE;EACF,CAAC,EAAE,IAAI,CAAC;EAER,OAAO,MAAMC,aAAa,CAAC3C,QAAQ,CAAC;AACtC,CAAC,EAAE,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}