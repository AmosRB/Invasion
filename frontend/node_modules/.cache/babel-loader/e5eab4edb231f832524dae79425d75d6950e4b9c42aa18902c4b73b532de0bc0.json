{"ast":null,"code":"// ◊ë◊™◊ï◊ö ◊î◊ß◊ï◊û◊§◊ï◊†◊†◊ò◊î App:\n\nconst getNextAlienId = existingAliens => {\n  const ids = existingAliens.map(a => a.id);\n  return ids.length > 0 ? Math.max(...ids) + 1 : 1;\n};\nconst handleMapClick = async latlng => {\n  if (!createMode) return;\n  setCreateMode(false);\n  setCursorStyle(\"default\");\n  const locationName = await getNearestTownName(latlng.lat, latlng.lng);\n  const landingId = Date.now();\n  const newLanding = {\n    id: landingId,\n    lat: latlng.lat,\n    lng: latlng.lng,\n    name: locationName\n  };\n\n  // üëΩ ◊ô◊¶◊ô◊®◊™ ◊†◊™◊ô◊ë◊ô◊ù + ◊ó◊ô◊ô◊ñ◊®◊ô◊ù ◊¢◊ù ◊û◊ñ◊î◊ô◊ù ◊¢◊ï◊ß◊ë◊ô◊ù\n  const directions = [0, 45, 90, 135, 180, 225, 270, 315];\n  const startId = getNextAlienId(aliens);\n  const alienPromises = directions.map(async (angle, index) => {\n    const rad = angle * Math.PI / 180;\n    const target = [latlng.lat + 0.05 * Math.cos(rad), latlng.lng + 0.05 * Math.sin(rad)];\n    const route = await getRoute([latlng.lat, latlng.lng], target);\n    return {\n      id: startId + index,\n      route,\n      positionIdx: 0,\n      landingId\n    };\n  });\n  const newAliens = await Promise.all(alienPromises);\n  setLandings(prev => [...prev, newLanding]);\n  setAliens(prev => [...prev, ...newAliens]);\n\n  // üõ∞Ô∏è ◊©◊ú◊ô◊ó◊î ◊ú◊©◊®◊™ ◊õ◊ï◊ú◊ú ◊î◊†◊ó◊ô◊™◊î ◊ï◊î◊ó◊ô◊ô◊ñ◊®◊ô◊ù\n  const landingFeature = {\n    type: \"Feature\",\n    geometry: {\n      type: \"Point\",\n      coordinates: [latlng.lng, latlng.lat]\n    },\n    properties: {\n      id: landingId,\n      type: \"landing\",\n      locationName\n    }\n  };\n  const alienFeatures = newAliens.map(a => ({\n    type: \"Feature\",\n    geometry: {\n      type: \"Point\",\n      coordinates: [a.route[a.positionIdx][1], a.route[a.positionIdx][0]]\n    },\n    properties: {\n      id: a.id,\n      type: \"alien\",\n      landingId: a.landingId,\n      alienGlobalId: a.id\n    }\n  }));\n  const featureCollection = {\n    type: \"FeatureCollection\",\n    features: [landingFeature, ...alienFeatures]\n  };\n  try {\n    await axios.post(`${API_BASE}/api/update-invasion`, featureCollection);\n  } catch (err) {\n    console.error(\"‚ùå Failed to send invasion update:\", err.message);\n  }\n};","map":{"version":3,"names":["getNextAlienId","existingAliens","ids","map","a","id","length","Math","max","handleMapClick","latlng","createMode","setCreateMode","setCursorStyle","locationName","getNearestTownName","lat","lng","landingId","Date","now","newLanding","name","directions","startId","aliens","alienPromises","angle","index","rad","PI","target","cos","sin","route","getRoute","positionIdx","newAliens","Promise","all","setLandings","prev","setAliens","landingFeature","type","geometry","coordinates","properties","alienFeatures","alienGlobalId","featureCollection","features","axios","post","API_BASE","err","console","error","message"],"sources":["C:/Users/Amos/Desktop/invasionAll/invasion/frontend/src/App.js"],"sourcesContent":["// ◊ë◊™◊ï◊ö ◊î◊ß◊ï◊û◊§◊ï◊†◊†◊ò◊î App:\r\n\r\nconst getNextAlienId = (existingAliens) => {\r\n  const ids = existingAliens.map(a => a.id);\r\n  return ids.length > 0 ? Math.max(...ids) + 1 : 1;\r\n};\r\n\r\nconst handleMapClick = async (latlng) => {\r\n  if (!createMode) return;\r\n  setCreateMode(false);\r\n  setCursorStyle(\"default\");\r\n\r\n  const locationName = await getNearestTownName(latlng.lat, latlng.lng);\r\n  const landingId = Date.now();\r\n\r\n  const newLanding = {\r\n    id: landingId,\r\n    lat: latlng.lat,\r\n    lng: latlng.lng,\r\n    name: locationName\r\n  };\r\n\r\n  // üëΩ ◊ô◊¶◊ô◊®◊™ ◊†◊™◊ô◊ë◊ô◊ù + ◊ó◊ô◊ô◊ñ◊®◊ô◊ù ◊¢◊ù ◊û◊ñ◊î◊ô◊ù ◊¢◊ï◊ß◊ë◊ô◊ù\r\n  const directions = [0, 45, 90, 135, 180, 225, 270, 315];\r\n  const startId = getNextAlienId(aliens);\r\n  const alienPromises = directions.map(async (angle, index) => {\r\n    const rad = angle * Math.PI / 180;\r\n    const target = [\r\n      latlng.lat + 0.05 * Math.cos(rad),\r\n      latlng.lng + 0.05 * Math.sin(rad)\r\n    ];\r\n    const route = await getRoute([latlng.lat, latlng.lng], target);\r\n    return {\r\n      id: startId + index,\r\n      route,\r\n      positionIdx: 0,\r\n      landingId\r\n    };\r\n  });\r\n\r\n  const newAliens = await Promise.all(alienPromises);\r\n\r\n  setLandings(prev => [...prev, newLanding]);\r\n  setAliens(prev => [...prev, ...newAliens]);\r\n\r\n  // üõ∞Ô∏è ◊©◊ú◊ô◊ó◊î ◊ú◊©◊®◊™ ◊õ◊ï◊ú◊ú ◊î◊†◊ó◊ô◊™◊î ◊ï◊î◊ó◊ô◊ô◊ñ◊®◊ô◊ù\r\n  const landingFeature = {\r\n    type: \"Feature\",\r\n    geometry: {\r\n      type: \"Point\",\r\n      coordinates: [latlng.lng, latlng.lat]\r\n    },\r\n    properties: {\r\n      id: landingId,\r\n      type: \"landing\",\r\n      locationName\r\n    }\r\n  };\r\n\r\n  const alienFeatures = newAliens.map(a => ({\r\n    type: \"Feature\",\r\n    geometry: {\r\n      type: \"Point\",\r\n      coordinates: [\r\n        a.route[a.positionIdx][1],\r\n        a.route[a.positionIdx][0]\r\n      ]\r\n    },\r\n    properties: {\r\n      id: a.id,\r\n      type: \"alien\",\r\n      landingId: a.landingId,\r\n      alienGlobalId: a.id\r\n    }\r\n  }));\r\n\r\n  const featureCollection = {\r\n    type: \"FeatureCollection\",\r\n    features: [landingFeature, ...alienFeatures]\r\n  };\r\n\r\n  try {\r\n    await axios.post(`${API_BASE}/api/update-invasion`, featureCollection);\r\n  } catch (err) {\r\n    console.error(\"‚ùå Failed to send invasion update:\", err.message);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}