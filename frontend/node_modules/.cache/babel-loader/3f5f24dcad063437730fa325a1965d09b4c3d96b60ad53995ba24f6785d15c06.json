{"ast":null,"code":"import axios from 'axios';\nimport polyline from 'polyline';\nconst API_BASE = \"https://invasion-api.onrender.com\";\nexport default async function getRoute(from, to) {\n  try {\n    const res = await axios.get(`${API_BASE}/api/route?fromLat=${from[0]}&fromLng=${from[1]}&toLat=${to[0]}&toLng=${to[1]}`);\n    return polyline.decode(res.data.routes[0].geometry).map(([lat, lng]) => [lat, lng]);\n  } catch (err) {\n    console.error(\"❌ getRoute failed:\", err.message);\n    return [from]; // fallback to starting point\n  }\n}","map":{"version":3,"names":["axios","polyline","API_BASE","getRoute","from","to","res","get","decode","data","routes","geometry","map","lat","lng","err","console","error","message"],"sources":["C:/Users/Amos/Desktop/invasionAll/invasion/frontend/src/utils/getRoute.js"],"sourcesContent":["\nimport axios from 'axios';\nimport polyline from 'polyline';\n\nconst API_BASE = \"https://invasion-api.onrender.com\";\n\nexport default async function getRoute(from, to) {\n  try {\n    const res = await axios.get(\n      `${API_BASE}/api/route?fromLat=${from[0]}&fromLng=${from[1]}&toLat=${to[0]}&toLng=${to[1]}`\n    );\n    return polyline.decode(res.data.routes[0].geometry).map(([lat, lng]) => [lat, lng]);\n  } catch (err) {\n    console.error(\"❌ getRoute failed:\", err.message);\n    return [from]; // fallback to starting point\n  }\n}\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,UAAU;AAE/B,MAAMC,QAAQ,GAAG,mCAAmC;AAEpD,eAAe,eAAeC,QAAQA,CAACC,IAAI,EAAEC,EAAE,EAAE;EAC/C,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAG,CACzB,GAAGL,QAAQ,sBAAsBE,IAAI,CAAC,CAAC,CAAC,YAAYA,IAAI,CAAC,CAAC,CAAC,UAAUC,EAAE,CAAC,CAAC,CAAC,UAAUA,EAAE,CAAC,CAAC,CAAC,EAC3F,CAAC;IACD,OAAOJ,QAAQ,CAACO,MAAM,CAACF,GAAG,CAACG,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,GAAG,CAAC,KAAK,CAACD,GAAG,EAAEC,GAAG,CAAC,CAAC;EACrF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEF,GAAG,CAACG,OAAO,CAAC;IAChD,OAAO,CAACd,IAAI,CAAC,CAAC,CAAC;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}