{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amos\\\\Desktop\\\\invasionAll\\\\invasion\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Polyline, useMapEvents } from 'react-leaflet';\nimport axios from 'axios';\nimport polyline from 'polyline';\nimport L from 'leaflet';\nimport Navbar from './components/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = [31.5, 34.8];\nconst API_BASE = \"https://invasion-api.onrender.com\";\nlet globalAlienId = 1;\nconst alienIcon = number => L.divIcon({\n  html: `<div style=\"font-size:20px; font-weight:bold;\">👽 <span style=\"font-size:14px; color:black;\">${number}</span></div>`,\n  className: 'alien-icon',\n  iconSize: [30, 30]\n});\nconst landingIcon = locationName => L.divIcon({\n  html: `<div style=\"display:flex; flex-direction:column; align-items:center;\">\n    <div style=\"font-size:24px;\">🛸</div>\n    <div style=\"background-color:black; color:white; padding:2px 6px; border-radius:4px; font-size:12px; margin-top:2px;\">${locationName}</div>\n  </div>`,\n  className: 'landing-icon',\n  iconSize: [100, 40]\n});\nconst getNearestTownName = async (lat, lng) => {\n  try {\n    const res = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`);\n    return res.data.address.town || res.data.address.city || res.data.address.village || \"Unknown\";\n  } catch {\n    return \"Unknown\";\n  }\n};\nconst getRoute = async (from, to) => {\n  try {\n    const res = await axios.get(`https://router.project-osrm.org/route/v1/driving/${from[1]},${from[0]};${to[1]},${to[0]}?overview=full&geometries=polyline`);\n    return polyline.decode(res.data.routes[0].geometry).map(coord => [coord[0], coord[1]]);\n  } catch (err) {\n    console.error(\"❌ Route fetch failed:\", err.message);\n    return [from];\n  }\n};\nconst ClickHandler = ({\n  onClick\n}) => {\n  _s();\n  useMapEvents({\n    click(e) {\n      onClick(e.latlng);\n    }\n  });\n  return null;\n};\n_s(ClickHandler, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c = ClickHandler;\nexport default function App() {\n  _s2();\n  const [landings, setLandings] = useState([]);\n  const [aliens, setAliens] = useState([]);\n  const [createMode, setCreateMode] = useState(false);\n  const [cursorStyle, setCursorStyle] = useState(\"default\");\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const res = await axios.get(`${API_BASE}/api/invasion`);\n        const features = res.data.features;\n        const newLandings = features.filter(f => {\n          var _f$properties;\n          return ((_f$properties = f.properties) === null || _f$properties === void 0 ? void 0 : _f$properties.type) === 'landing';\n        });\n        const newAliens = features.filter(f => {\n          var _f$properties2;\n          return ((_f$properties2 = f.properties) === null || _f$properties2 === void 0 ? void 0 : _f$properties2.type) === 'alien';\n        });\n        setLandings(newLandings.map(l => ({\n          id: l.properties.id,\n          lat: l.geometry.coordinates[1],\n          lng: l.geometry.coordinates[0],\n          name: l.properties.locationName\n        })));\n\n        // לא נחליף את החייזרים המקומיים בתצוגה — רק נוסיף את המרוחקים\n        const remoteAliens = newAliens.map(a => ({\n          id: a.properties.id,\n          landingId: a.properties.landingId,\n          route: [[a.geometry.coordinates[1], a.geometry.coordinates[0]]],\n          positionIdx: 0\n        }));\n        setAliens(prev => {\n          const localIds = prev.map(a => a.id);\n          const merged = [...prev];\n          remoteAliens.forEach(a => {\n            if (!localIds.includes(a.id)) merged.push(a);\n          });\n          return merged;\n        });\n      } catch (err) {\n        console.error(\"❌ Failed to fetch invasion data:\", err.message);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleMapClick = async latlng => {\n    if (!createMode) return;\n    setCreateMode(false);\n    setCursorStyle(\"default\");\n    const locationName = await getNearestTownName(latlng.lat, latlng.lng);\n    const landingId = Date.now();\n    const newLanding = {\n      id: landingId,\n      lat: latlng.lat,\n      lng: latlng.lng,\n      name: locationName\n    };\n    const directions = [0, 45, 90, 135, 180, 225, 270, 315];\n    const alienPromises = directions.map(async angle => {\n      const rad = angle * Math.PI / 180;\n      const target = [latlng.lat + 0.05 * Math.cos(rad), latlng.lng + 0.05 * Math.sin(rad)];\n      const route = await getRoute([latlng.lat, latlng.lng], target);\n      return {\n        id: globalAlienId++,\n        route,\n        positionIdx: 0,\n        landingId\n      };\n    });\n    const newAliens = await Promise.all(alienPromises);\n    setLandings(l => [...l, newLanding]);\n    setAliens(a => [...a, ...newAliens]);\n  };\n\n  // תזוזה של החייזרים כל שנייה\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setAliens(prevAliens => prevAliens.map(alien => {\n        const newIdx = alien.positionIdx + 1;\n        if (newIdx >= alien.route.length) return alien;\n        return {\n          ...alien,\n          positionIdx: newIdx\n        };\n      }));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // שליחה לשרת כל שנייה\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (landings.length === 0 && aliens.length === 0) return;\n      const geoJSON = {\n        type: \"FeatureCollection\",\n        features: [...landings.map(l => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [l.lng, l.lat]\n          },\n          properties: {\n            type: \"landing\",\n            id: l.id,\n            locationName: l.name\n          }\n        })), ...aliens.map(a => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [a.route[a.positionIdx][1], a.route[a.positionIdx][0]]\n          },\n          properties: {\n            type: \"alien\",\n            id: a.id,\n            landingId: a.landingId,\n            alienGlobalId: a.id\n          }\n        }))]\n      };\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [landings, aliens]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      cursor: cursorStyle\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onActivateCreate: () => {\n        setCreateMode(true);\n        setCursorStyle(\"crosshair\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: 10,\n      style: {\n        height: 'calc(100vh - 50px)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ClickHandler, {\n        onClick: handleMapClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), landings.map(l => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [l.lat, l.lng],\n        icon: landingIcon(l.name)\n      }, l.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)), aliens.map(a => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Polyline, {\n          positions: a.route,\n          color: \"purple\",\n          dashArray: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: a.route[a.positionIdx],\n          icon: alienIcon(a.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, a.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"w5xqjluL79AbV2Ca8DZYqddHpD8=\");\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ClickHandler\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Polyline","useMapEvents","axios","polyline","L","Navbar","jsxDEV","_jsxDEV","center","API_BASE","globalAlienId","alienIcon","number","divIcon","html","className","iconSize","landingIcon","locationName","getNearestTownName","lat","lng","res","get","data","address","town","city","village","getRoute","from","to","decode","routes","geometry","map","coord","err","console","error","message","ClickHandler","onClick","_s","click","e","latlng","_c","App","_s2","landings","setLandings","aliens","setAliens","createMode","setCreateMode","cursorStyle","setCursorStyle","interval","setInterval","features","newLandings","filter","f","_f$properties","properties","type","newAliens","_f$properties2","l","id","coordinates","name","remoteAliens","a","landingId","route","positionIdx","prev","localIds","merged","forEach","includes","push","clearInterval","handleMapClick","Date","now","newLanding","directions","alienPromises","angle","rad","Math","PI","target","cos","sin","Promise","all","prevAliens","alien","newIdx","length","geoJSON","alienGlobalId","post","style","cursor","children","onActivateCreate","fileName","_jsxFileName","lineNumber","columnNumber","zoom","height","url","position","icon","Fragment","positions","color","dashArray","_c2","$RefreshReg$"],"sources":["C:/Users/Amos/Desktop/invasionAll/invasion/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Polyline, useMapEvents } from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport polyline from 'polyline';\r\nimport L from 'leaflet';\r\nimport Navbar from './components/Navbar';\r\n\r\nconst center = [31.5, 34.8];\r\nconst API_BASE = \"https://invasion-api.onrender.com\";\r\nlet globalAlienId = 1;\r\n\r\nconst alienIcon = (number) => L.divIcon({\r\n  html: `<div style=\"font-size:20px; font-weight:bold;\">👽 <span style=\"font-size:14px; color:black;\">${number}</span></div>`,\r\n  className: 'alien-icon',\r\n  iconSize: [30, 30],\r\n});\r\n\r\nconst landingIcon = (locationName) => L.divIcon({\r\n  html: `<div style=\"display:flex; flex-direction:column; align-items:center;\">\r\n    <div style=\"font-size:24px;\">🛸</div>\r\n    <div style=\"background-color:black; color:white; padding:2px 6px; border-radius:4px; font-size:12px; margin-top:2px;\">${locationName}</div>\r\n  </div>`,\r\n  className: 'landing-icon',\r\n  iconSize: [100, 40],\r\n});\r\n\r\nconst getNearestTownName = async (lat, lng) => {\r\n  try {\r\n    const res = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`);\r\n    return res.data.address.town || res.data.address.city || res.data.address.village || \"Unknown\";\r\n  } catch {\r\n    return \"Unknown\";\r\n  }\r\n};\r\n\r\nconst getRoute = async (from, to) => {\r\n  try {\r\n    const res = await axios.get(\r\n      `https://router.project-osrm.org/route/v1/driving/${from[1]},${from[0]};${to[1]},${to[0]}?overview=full&geometries=polyline`\r\n    );\r\n    return polyline.decode(res.data.routes[0].geometry).map(coord => [coord[0], coord[1]]);\r\n  } catch (err) {\r\n    console.error(\"❌ Route fetch failed:\", err.message);\r\n    return [from];\r\n  }\r\n};\r\n\r\nconst ClickHandler = ({ onClick }) => {\r\n  useMapEvents({\r\n    click(e) {\r\n      onClick(e.latlng);\r\n    },\r\n  });\r\n  return null;\r\n};\r\n\r\nexport default function App() {\r\n  const [landings, setLandings] = useState([]);\r\n  const [aliens, setAliens] = useState([]);\r\n  const [createMode, setCreateMode] = useState(false);\r\n  const [cursorStyle, setCursorStyle] = useState(\"default\");\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        const res = await axios.get(`${API_BASE}/api/invasion`);\r\n        const features = res.data.features;\r\n\r\n        const newLandings = features.filter(f => f.properties?.type === 'landing');\r\n        const newAliens = features.filter(f => f.properties?.type === 'alien');\r\n\r\n        setLandings(newLandings.map(l => ({\r\n          id: l.properties.id,\r\n          lat: l.geometry.coordinates[1],\r\n          lng: l.geometry.coordinates[0],\r\n          name: l.properties.locationName\r\n        })));\r\n\r\n        // לא נחליף את החייזרים המקומיים בתצוגה — רק נוסיף את המרוחקים\r\n        const remoteAliens = newAliens.map(a => ({\r\n          id: a.properties.id,\r\n          landingId: a.properties.landingId,\r\n          route: [[a.geometry.coordinates[1], a.geometry.coordinates[0]]],\r\n          positionIdx: 0\r\n        }));\r\n\r\n        setAliens(prev => {\r\n          const localIds = prev.map(a => a.id);\r\n          const merged = [...prev];\r\n          remoteAliens.forEach(a => {\r\n            if (!localIds.includes(a.id)) merged.push(a);\r\n          });\r\n          return merged;\r\n        });\r\n      } catch (err) {\r\n        console.error(\"❌ Failed to fetch invasion data:\", err.message);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleMapClick = async (latlng) => {\r\n    if (!createMode) return;\r\n    setCreateMode(false);\r\n    setCursorStyle(\"default\");\r\n\r\n    const locationName = await getNearestTownName(latlng.lat, latlng.lng);\r\n    const landingId = Date.now();\r\n\r\n    const newLanding = {\r\n      id: landingId,\r\n      lat: latlng.lat,\r\n      lng: latlng.lng,\r\n      name: locationName\r\n    };\r\n\r\n    const directions = [0, 45, 90, 135, 180, 225, 270, 315];\r\n    const alienPromises = directions.map(async (angle) => {\r\n      const rad = angle * Math.PI / 180;\r\n      const target = [\r\n        latlng.lat + 0.05 * Math.cos(rad),\r\n        latlng.lng + 0.05 * Math.sin(rad)\r\n      ];\r\n      const route = await getRoute([latlng.lat, latlng.lng], target);\r\n      return {\r\n        id: globalAlienId++,\r\n        route,\r\n        positionIdx: 0,\r\n        landingId\r\n      };\r\n    });\r\n\r\n    const newAliens = await Promise.all(alienPromises);\r\n\r\n    setLandings(l => [...l, newLanding]);\r\n    setAliens(a => [...a, ...newAliens]);\r\n  };\r\n\r\n  // תזוזה של החייזרים כל שנייה\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setAliens(prevAliens =>\r\n        prevAliens.map(alien => {\r\n          const newIdx = alien.positionIdx + 1;\r\n          if (newIdx >= alien.route.length) return alien;\r\n          return { ...alien, positionIdx: newIdx };\r\n        })\r\n      );\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // שליחה לשרת כל שנייה\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (landings.length === 0 && aliens.length === 0) return;\r\n\r\n      const geoJSON = {\r\n        type: \"FeatureCollection\",\r\n        features: [\r\n          ...landings.map(l => ({\r\n            type: \"Feature\",\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: [l.lng, l.lat],\r\n            },\r\n            properties: {\r\n              type: \"landing\",\r\n              id: l.id,\r\n              locationName: l.name,\r\n            }\r\n          })),\r\n          ...aliens.map(a => ({\r\n            type: \"Feature\",\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: [\r\n                a.route[a.positionIdx][1],\r\n                a.route[a.positionIdx][0]\r\n              ]\r\n            },\r\n            properties: {\r\n              type: \"alien\",\r\n              id: a.id,\r\n              landingId: a.landingId,\r\n              alienGlobalId: a.id\r\n            }\r\n          }))\r\n        ]\r\n      };\r\n\r\n      axios.post(`${API_BASE}/api/update-invasion`, geoJSON);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [landings, aliens]);\r\n\r\n  return (\r\n    <div style={{ cursor: cursorStyle }}>\r\n      <Navbar onActivateCreate={() => {\r\n        setCreateMode(true);\r\n        setCursorStyle(\"crosshair\");\r\n      }} />\r\n      <MapContainer center={center} zoom={10} style={{ height: 'calc(100vh - 50px)' }}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        <ClickHandler onClick={handleMapClick} />\r\n\r\n        {landings.map((l) => (\r\n          <Marker key={l.id} position={[l.lat, l.lng]} icon={landingIcon(l.name)} />\r\n        ))}\r\n\r\n        {aliens.map((a) => (\r\n          <React.Fragment key={a.id}>\r\n            <Polyline positions={a.route} color=\"purple\" dashArray=\"3\" />\r\n            <Marker position={a.route[a.positionIdx]} icon={alienIcon(a.id)} />\r\n          </React.Fragment>\r\n        ))}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}